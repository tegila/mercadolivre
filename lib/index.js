// Generated by CoffeeScript 1.12.7
(function() {
  var Auth, Item, Mercadolivre, Orders, Questions, Rest, Search, Shipping, Users, Utils, _, config, https, log, querystring;

  log = require('debug')('log');

  Rest = require("./rest");

  config = require("./config");

  Auth = {};


  /* @get_token - Ensure always send last valid token */

  Auth.get_token = (function(_this) {
    return function(callback) {
      if (config.session.access_token != null) {
        if (config.session.access_token.invalid != null) {
          return Auth._refresh_token(callback);
        }
        return callback(config.session);
      } else {
        return Auth._init_token(callback);
      }
    };
  })(this);

  Auth._change_user_id = function(new_user_id) {
    return config.session.seller_id = new_user_id;
  };

  Auth._init_token = function(callback) {
    var data;
    data = {
      grant_type: "client_credentials",
      client_id: config.client_id,
      client_secret: config.client_secret
    };
    return Rest._post("/oauth/token", null, data, function(data) {
      console.log("response:", data);
      config.session = {};
      config.session.access_token = data.access_token;
      config.session.seller_id = data.user_id;
      console.log(config.session);
      return callback(config.session);
    });
  };


  /* TODO: Not working */

  Auth._refresh_token = function(callback) {
    var data;
    data = {
      grant_type: "refresh_token",
      client_id: config.client_id,
      client_secret: config.client_secret,
      refresh_token: config.session.refresh_token
    };
    return Rest._post("/oauth/token", data, callback);
  };

  module.exports = Auth;

  module.exports = {};

  log = require('debug')('log');

  config = require("./config");

  Mercadolivre = {
    Auth: require('./auth'),
    Users: require('./users'),
    Categories: {},
    Listings: {},
    Locations: {},
    Currencies: {},
    Item: require('./item'),
    Search: require('./search'),
    Orders: require('./orders'),
    Questions: require('./questions'),
    Feedback: {},
    Metrics: {},
    Shipping: require('./shipping')
  };

  module.exports = function(client_id, client_secret, session) {
    config.client_id = client_id;
    config.client_secret = client_secret;
    config.session = session || {};
    log(require("./config"));
    return Mercadolivre;
  };

  log = require('debug')('log');

  _ = require("lodash");

  Rest = require("./rest");

  Auth = require('./auth');

  Utils = require('./utils');

  config = require('./config');

  Item = {};


  /* @get_item - */

  Item.get = function(item_id, callback) {
    return Auth.get_token(function() {
      return Rest._get("/items/" + item_id, config.session, callback);
    });
  };


  /* @from_authenticated_seller - Fetch one order API Call */

  Item.from_authenticated_seller = function(seller, filter, callback) {
    return Auth.get_token(function() {
      var data;
      data = _.extend({}, filter, config.session);
      return Utils.paginate(Rest._get, "/users/" + seller + "/items/search", data, callback);
    });
  };


  /* @status - Fetch one order API Call */

  Item.status = function(seller, callback) {
    return Auth.get_token(function() {
      var data;
      data = _.extend({}, config.session, {
        status: 'active'
      });
      return Utils.paginate(Rest._get, "/users/" + seller + "/items/search", data, function(active) {
        data = _.extend(data, {
          status: 'paused'
        });
        return Utils.paginate(Rest._get, "/users/" + seller + "/items/search", data, function(paused) {
          data = _.extend(data, {
            status: 'closed'
          });
          return Utils.paginate(Rest._get, "/users/" + seller + "/items/search", data, function(closed) {
            return callback({
              active: active,
              paused: paused,
              closed: closed
            });
          });
        });
      });
    });
  };


  /* @get_item_and_description - */

  Item.with_description = function(item_id, callback) {
    return Rest._get("/items/" + item_id, config.session, function(product) {
      return Rest._get("/items/" + item_id + "/description", config.session, function(description) {
        return callback(_.extend({}, product, description));
      });
    });
  };

  Item.description = function(item_id, callback) {
    return Rest._get("/items/" + item_id + "/description", config.session, callback);
  };


  /* @save_item - */

  Item.save = function(item, callback) {
    return Auth.get_token(function() {
      return Rest._post("/items", config.session.access_token, item, callback);
    });
  };


  /* @update_item - */

  Item.update = function(item_id, callback) {
    return Rest._put("/items/" + item_id, config.session, callback);
  };

  Item.get_item_own = function(item_id, callback) {
    return Rest._get("/items/" + item_id, null, callback);
  };

  module.exports = Item;

  log = require('debug')('log');

  _ = require("lodash");

  Rest = require("./rest");

  Auth = require('./auth');

  config = require('./config');

  Orders = {};


  /* @get_order - Fetch one order API Call */

  Orders.get_order = function(order_id, callback) {
    return Auth.get_token(function() {
      return Rest._get("/orders/" + order_id, config.session.access_token, callback);
    });
  };


  /* @ready_to_ship - */

  Orders.ready_to_ship = function(seller_id, callback) {
    return Auth.get_token(function() {
      var data;
      data = {
        "access_token": config.session.access_token,
        "seller": seller_id,
        "shipping.status": "ready_to_ship",
        "shipping.substatus": "ready_to_print"
      };
      console.log(data);
      return Orders.recent(data, callback);
    });
  };


  /* @recent */

  Orders.recent = function(data, callback) {
    return Rest._get("/orders/search/recent", data, function(response) {
      console.log("TOTAL: " + response.paging.total);
      return callback(response.results);
    });
  };


  /* @orders - Orders Search API Call */

  Orders.orders = function(data, callback) {
    return Rest._get("/orders/search", data, function(response) {
      log(response);
      return callback(response.results);
    });
  };


  /* @touch_orders - Orders Search API Call */

  Orders.touch_orders = function(data, callback) {
    var _data;
    _data = _.extend({}, data);
    return Rest._get("/orders/search", _data, function(response) {
      log(response);
      return callback(response.paging.total);
    });
  };


  /* @search_orders - Orders Search API Call */

  Orders.search_orders = function(seller, filter, callback) {
    return Auth.get_token(function() {
      var data;
      data = {
        access_token: config.session.access_token,
        seller: seller
      };
      data = _.extend(data, filter);
      return _paginate(Rest._get, "/orders/search", data, callback);
    });
  };


  /* @pending_orders - Orders Search API Call */

  Orders.pending_orders = function(seller, offset, callback) {
    return Auth.get_token(function() {
      var data;
      data = {
        access_token: config.session.access_token,
        seller: seller,
        offset: offset || 0
      };
      return Rest._get("/orders/search/pending", data, callback);
    });
  };


  /* @archived_orders - Orders Search API Call */

  Orders.archived_orders = function(seller, offset, callback) {
    return Auth.get_token(function() {
      var data;
      data = {
        access_token: config.session.access_token,
        seller: seller,
        offset: offset || 0
      };
      return Rest._get("/orders/search/archived", data, callback);
    });
  };

  module.exports = Orders;

  log = require('debug')('log');

  _ = require("lodash");

  Rest = require("./rest");

  Auth = require('./auth');

  Utils = require('./utils');

  config = require('./config');

  Questions = {};


  /* @unanswered - */

  Questions.unanswered = function(callback) {
    return Auth.get_token(function() {
      var data;
      data = {
        "access_token": config.session.access_token,
        "seller": config.session.seller_id,
        "status": "UNANSWERED"
      };
      return Rest._get("/questions/search", data, callback);
    });
  };

  module.exports = Questions;

  querystring = require('querystring');

  Rest = function() {
    var host;
    host = "https://api.mercadolibre.com";
    this._get = function(endpoint, query, success) {
      var url, xhr;
      endpoint += '?' + querystring.stringify(query);
      xhr = new XMLHttpRequest();
      url = "" + host + endpoint;
      xhr.open("GET", url, true);
      xhr.setRequestHeader('x-format-new', true);
      xhr.onreadystatechange = function() {
        var data;
        if (this.readyState !== 4) {
          return;
        }
        if (this.status === 200) {
          data = JSON.parse(this.responseText);
          return success(data);
        }
      };
      return xhr.send(null);
    };
    this._post = function(endpoint, query, data, success) {
      var url, xhr;
      xhr = new XMLHttpRequest();
      url = "" + host + endpoint;
      xhr.open("POST", url, true);
      xhr.onreadystatechange = function() {
        if (this.readyState !== 4) {
          return;
        }
        if (this.status === 200) {
          data = JSON.parse(this.responseText);
          return success(data);
        }
      };
      return xhr.send(JSON.stringify(data));
    };
    return this;
  };

  module.exports = Rest;

  module.exports = require('./rest.browser')();

  log = require('debug')('log');

  querystring = require('querystring');

  https = require('https');

  Rest = function() {
    var _request, host;
    host = "api.mercadolibre.com";
    this._get = function(endpoint, query, success) {
      return _request(endpoint, "GET", query, null, success);
    };
    this._post = function(endpoint, query, data, success) {
      return _request(endpoint, "POST", query, data, success);
    };
    _request = function(endpoint, method, query, data, success) {
      var dataString, headers, options, req;
      dataString = JSON.stringify(data);
      headers = {};
      console.log("query:", query);
      endpoint += '?' + querystring.stringify(query);
      if (method === 'GET') {

      } else {
        headers = {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(dataString, 'utf-8'),
          'x-format-new': true
        };
      }
      options = {
        host: host,
        path: endpoint,
        method: method,
        headers: headers
      };
      console.log(method + " => " + endpoint);
      req = https.request(options, function(res) {
        var responseString;
        res.setEncoding('utf-8');
        responseString = '';
        res.on('data', function(data) {
          return responseString += data;
        });
        return res.on('end', function() {
          return success(JSON.parse(responseString));
        });
      });
      req.write(dataString);
      return req.end();
    };
    return this;
  };

  module.exports = Rest;

  log = require('debug')('log');

  _ = require("lodash");

  Rest = require("./rest");

  Search = {};


  /* @single only one result - */

  Search.single = function(query_string, callback) {
    var data;
    data = {
      q: query_string,
      limit: 1
    };
    return Rest._get("/sites/MLB/search", data, callback);
  };


  /* @by_query - */

  Search.by_query = function(query_string, offset, callback) {
    var data;
    data = {
      q: query_string,
      offset: offset
    };
    return Rest._get("/sites/MLB/search", data, callback);
  };


  /* @by_url - */

  Search.by_url = function(query_string, callback) {
    var data;
    data = {
      q: query_string
    };
    return Rest._get("/sites/MLB/searchUrl", data, callback);
  };


  /* @items_from_seller - */

  Search.items_from_seller = function(seller_id, offset, callback) {
    var data;
    data = {
      seller_id: seller_id,
      offset: offset
    };
    return Rest._get("/sites/MLB/search", data, callback);
  };


  /* @items_from_seller_by_category - */

  Search.items_from_seller_by_category = function(seller_id, category_id, callback) {
    var data;
    data = {
      seller_id: seller_id,
      category: category_id
    };
    return Rest._get("/sites/MLB/search", data, callback);
  };


  /* @items_from_nickname - */

  Search.items_from_nickname = function(nickname, callback) {
    var data;
    data = {
      nickname: nickname
    };
    return Rest._get("/sites/MLB/search", data, callback);
  };

  module.exports = Search;

  log = require('debug')('log');

  _ = require("lodash");

  Rest = require("./rest");

  Auth = require('./auth');

  config = require('./config');

  Shipping = {};


  /* @get_order - Fetch one order API Call */

  Shipping.get_shipment = function(shipping_id, callback) {
    return Auth.get_token(function() {
      return Rest._get("/shipments/" + shipping_id, config.session, callback);
    });
  };

  module.exports = Shipping;

  Rest = require("./rest");

  Users = {};


  /* @get_user - */

  Users.by_id = function(user_id, callback) {
    return Rest._get("/users/" + user_id, null, function(response) {
      return callback(response);
    });
  };

  module.exports = Users;

  Utils = {};

  _ = require("lodash");

  log = require('debug')('log');


  /* @_is_updated_version compare two objects */

  Utils.is_an_updated_version = function(obj1, obj2) {
    if (obj1.date_created === obj2.date_created) {
      return true;
    } else {
      return false;
    }
  };


  /* @_is_it_the_same compare two objects */

  Utils.is_it_the_same = function(obj1, obj2) {
    if ((obj1.last_updated != null) && obj1.last_updated === obj2.last_updated) {
      return true;
    } else if (typeof obj1.date_last_updated === "function" ? obj1.date_last_updated(obj1.date_last_updated === obj2.date_last_updated) : void 0) {
      return true;
    } else {
      return false;
    }
  };


  /* @compare two lists and return the result */

  Utils.compare = function(old_list, new_list) {

    /* @result */
    var i, j, k, l, ref, ref1, result;
    result = {
      insert: new Array(),
      updated: new Array()
    };
    for (i = k = 0, ref = new_list.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = old_list.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
        if (this._is_an_updated_version(old_list[j], new_list[i])) {
          if (!this._is_it_the_same(old_list[j], new_list[i])) {
            result.updated.push(_.extend({}, old_list[j], new_list[i]));
          }
          break;
        } else if (j === old_list.length - 1) {
          result.insert.push(new_list[i]);
        }
      }
    }
    result.all_changes = _.extend({}, result.insert, result.updated);
    return result;
  };

  Utils.paginate = function(fn, url, params, callback, _yield) {
    var defaults;
    _yield = _yield || [];
    defaults = {
      offset: 0,
      limit: 50
    };
    params = _.extend({}, defaults, params);
    log(url, params);
    return fn(url, params, function(res) {
      log(res.results[0]);
      _yield = _.union(_yield, res.results);
      params.offset += res.paging.limit;
      if (res.paging.total > res.paging.offset + res.paging.limit) {
        return Utils.paginate(fn, url, params, callback, _yield);
      } else {
        return callback(_yield);
      }
    });
  };

  module.exports = Utils;

}).call(this);
